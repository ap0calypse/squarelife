#!/usr/bin/perl
use strict;
use warnings;
use SDL;
use SDLx::App;
use SDLx::Text;
use Data::Dumper;

# color definitions
my %color = (
    'red'       =>  [ 255,   0,   0, 0],
    'white'     =>  [ 255, 255, 255, 0],
    'green'     =>  [   0, 255,   0, 0],
    'yellow'    =>  [ 255, 255,   0, 0],
    'cyan'      =>  [   0, 255, 255, 0],
    'purple'    =>  [ 255,   0, 255, 0],
    'blue'      =>  [   0,   0, 255, 0],
    'black'     =>  [   0,   0,   0, 0],
);

my $VERSION = '0.1a';
my $PROGNAME = "SquareLife $VERSION";
my $INFOTXT = "Information:\nA: Leg development\nB: Sight\nC: Colour\n" .
              "D: Strength\nE: Immune System\nF: Fertility";

# the object for the whole sdl app. For simplicity reasons, I use a fixed
# size for this version. Future versions may have the opportunity to define
# the size individually.
my $app = SDLx::App->new(
    w => 800,
    h => 550,
    d => 32,
    t => "$PROGNAME" 
);

# sdl text object for the title
my $title_text = SDLx::Text->new( 
    font => '/usr/share/fonts/TTF/VeraMono.ttf',
    size => '14',
    h_align => 'left',
    color => [255,255,255,255] 
);

# sdl object for the info text and the statistics
my $legend_text = SDLx::Text->new( 
    font => '/usr/share/fonts/TTF/VeraMono.ttf',
    size => '10',
    h_align => 'left',
    color => [255,255,255,255] 
);


# this function returns a random uppercase/lowercase strand and return it as a list.
# no parameters needed.
sub rand_genome {
    my @rand_gen;
    for (qw(a b c d e f)) {
        push @rand_gen, int(rand(2)) == 1 ? uc $_ : lc $_;
    }
    return @rand_gen;
}

# field hash for all the data. this stores where the animals are.
# it is 100 x 100, stores therefore 10000 values. at first, we initialize
# it with all zeroes. afterwards, we store the name of the animal.
my $fh;
for my $x (1 .. 100) {
    for my $y (1 .. 100) {
        $fh->{$x}{$y} = '0';
    }
}

# this in the animal-text, it shows the statistics for each animal. we initialize
# it with the newlines because otherwise it would stick to the information text.
my $ANITXT = "\n\n";

# the animalhash is the main storage for animal data.
my %animalhash;

# here we initialize 10 random animals. they get a random alphanumeric name, a random
# genome and a random location on the field.
for (1 .. 25) {
    my @chars = ("A" .. "Z", "a" .. "z", 0 .. 9);
    my $randname = join ("", @chars[map {rand @chars} (1 .. 10)] );
    my @strand_a = rand_genome();
    my @strand_b = rand_genome();
    my $randx = int(rand(101));
    my $randy = int(rand(101));
    $fh->{$randx}{$randy} = $randname;
    $animalhash{$randname} = {'xloc' => $randx, 'yloc' => $randy, 'sa' => [@strand_a], 'sb' => [@strand_b] };
}

# function that goes through all the animals and fills the animal text with information.
sub generate_legend {
    $ANITXT = "\n\n";
    for (keys %animalhash) {
        $ANITXT .= "$_ ($animalhash{$_}{'xloc'} $animalhash{$_}{'yloc'})\n";
    }
}

# function for the actual drawing of the animals
sub draw_animals {
    for (keys %animalhash) {
        # create rectangle and make it completely white.
        my $rect = SDLx::Sprite->new ( width => 5, height => 5 );
        $rect->surface->draw_rect([0,0,5,5], [255, 255, 255, 0]);
        my ($x, $y) = (10 + $animalhash{$_}{'xloc'} * 5, 30 + $animalhash{$_}{'yloc'} * 5);

        # dominant A present?
        if (${$animalhash{$_}{'sa'}}[0] eq 'A' || ${$animalhash{$_}{'sb'}}[0] eq 'A') {
            $rect->surface->draw_rect([0,0,5,1], $color{'red'});
        }
        else {
            $rect->surface->draw_rect([0,0,1,5], $color{'red'});
        }
        # dominant B present?
        if (${$animalhash{$_}{'sa'}}[1] eq 'B' || ${$animalhash{$_}{'sb'}}[1] eq 'B') {
            $rect->surface->draw_rect([0,0,5,1], $color{'blue'});
        }
        else {
            $rect->surface->draw_rect([0,0,1,5], $color{'blue'});
        }
        # dominant C present?
        if (${$animalhash{$_}{'sa'}}[2] eq 'C' || ${$animalhash{$_}{'sb'}}[2] eq 'C') {
            $rect->surface->draw_rect([0,0,5,1], $color{'yellow'});
        }
        else {
            $rect->surface->draw_rect([0,0,1,5], $color{'yellow'});
        }
        # dominant D present?
        if (${$animalhash{$_}{'sa'}}[3] eq 'D' || ${$animalhash{$_}{'sb'}}[3] eq 'D') {
            $rect->surface->draw_rect([0,0,5,1], $color{'green'});
        }
        else {
            $rect->surface->draw_rect([0,0,1,5], $color{'green'});
        }
        # dominant E present?
        if (${$animalhash{$_}{'sa'}}[4] eq 'E' || ${$animalhash{$_}{'sb'}}[4] eq 'E') {
            $rect->surface->draw_rect([0,0,5,1], $color{'cyan'});
        }
        else {
            $rect->surface->draw_rect([0,0,1,5], $color{'cyan'});
        }
        $rect->draw_xy( $app, $x, $y );
    }
}



my $i = 0;
while (1) {
    $app->draw_rect([0, 0, 800, 550], $color{'black'});
    $app->draw_rect([10, 30, 502, 502], $color{'white'});
    $app->draw_rect([11, 31, 500, 500], $color{'black'});
    $title_text->write_xy($app, 10, 5, "$PROGNAME");
    generate_legend();
    $legend_text->write_xy($app, 550, 5, $INFOTXT . $ANITXT);
    draw_animals();
    $i++;
    $app->update();
    sleep(1);
    exit(0) if $i == 10;
}
